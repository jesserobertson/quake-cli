[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gnet"
version = "0.1.0"
description = "Comprehensive GeoNet API client for earthquakes, volcanoes, and geohazard monitoring"
authors = [{name = "Jess Robertson", email = "jess.robertson@niwa.co.nz"}]
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
keywords = [
    "earthquakes",
    "volcanoes",
    "geohazards",
    "geonet",
    "cli",
    "python",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Monitoring",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "tenacity>=9.1.2,<10",
    "typer>=0.12.0,<1",
    "pydantic>=2.5.0,<3",
    "httpx>=0.26.0,<1",
    "rich>=13.7.0,<14",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest",
    "pytest-cov>=6.2.1,<7",
    "coverage>=7.0.0,<8",
    "pytest-asyncio",
    "pytest-httpx",
    # Code quality
    "mypy",
    "ruff",
    "pre-commit>=4.2.0,<5",
    # Build and distribution
    "build",
    "twine>=6.1.0,<7",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocstrings-python",
]
all = ["gnet[dev,docs]"]

[project.scripts]
gnet = "gnet.cli:app"

[project.urls]
Homepage = "https://github.com/jesserobertson/gnet"
Documentation = "https://jesserobertson.github.io/gnet/"
Repository = "https://github.com/jesserobertson/gnet"
Issues = "https://github.com/jesserobertson/gnet/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["gnet*"]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-args
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "FLY",    # flynt
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # complexity
    "W191",   # indentation contains tabs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["gnet"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--doctest-modules",
    "--doctest-glob=*.md",
    "--doctest-ignore-import-errors",
]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "doctest: marks tests as doctests from documentation",
]

[tool.coverage.run]
source = ["gnet"]
branch = true
omit = [
    "*/tests/*", 
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "*/.pixi/*",
    "*/build/*",
    "*/dist/*",
    "*/site/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"
title = "gnet Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.pixi.project]
name = "gnet"
version = "0.1.0"
description = "Comprehensive GeoNet API client for earthquakes, volcanoes, and geohazard monitoring"
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64"]

[tool.pixi.dependencies]
python = ">=3.12,<3.13"
# Core CLI dependencies only
tenacity = ">=9.1.2,<10"
httpx = ">=0.28.1,<0.29"
pydantic = ">=2.11.9,<3"
typer = ">=0.9.0,<1"
rich = ">=13.0.0,<14"

[tool.pixi.feature.dev.dependencies]
# Package installation
pip = "*"
# Testing
pytest = "*"
pytest-cov = ">=6.2.1,<7"
coverage = ">=7.0.0,<8"
pytest-asyncio = "*"
pytest-httpx = ">=0.35.0,<0.36"
# Code quality
mypy = "*"
ruff = "*"
pre-commit = ">=4.2.0,<5"
# Build and distribution moved to pypi-dependencies

[tool.pixi.feature.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"

[tool.pixi.pypi-dependencies]
sh = ">=2.0.0,<3"
logerr = { git = "https://github.com/jesserobertson/logerr.git" }
gnet = { path = ".", editable = true }
build = "*"
twine = ">=6.1.0,<7"

[tool.pixi.environments]
default = ["dev", "docs"]
dev = ["dev"]
docs = ["docs"]

[tool.pixi.tasks]
# CLI application
gnet = { cmd = "gnet", description = "Run the comprehensive GeoNet CLI" }

# Unified task scripts
quality = { cmd = "python scripts/quality.py", description = "Code quality management (linting, formatting, type checking, coverage)" }
dev = { cmd = "python scripts/dev.py", description = "Development environment management (setup, status, clean)" }
build = { cmd = "python scripts/build.py", description = "Build and distribution management (packaging, uploading)" }
docs = { cmd = "python scripts/docs.py", description = "Documentation management (serve, build, deploy)" }
test = { cmd = "python scripts/test.py", description = "Testing management (unit, integration)" }

# Unified operations
clean = { cmd = "python scripts/test.py clean && python scripts/docs.py clean && python scripts/build.py clean && python scripts/dev.py clean", description = "Clean all project artifacts (test, docs, build, dev)" }
check-all = { cmd = "python scripts/test.py all && python scripts/quality.py check", description = "Run comprehensive checks (all tests + quality)" }